name: pyTheiaSfM build and publish

on:
  push:
    branches:
      - master
  pull_request:
    types: [assigned, opened, synchronize, reopened]
  release:
    types: [published, edited]
  workflow_dispatch:
  create:

jobs:
  linux-build:
    name: Wrapper Linux Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pyversion: ["cp36-cp36m", "cp37-cp37m", "cp38-cp38", "cp39-cp39", "cp310-cp310"] 
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Build the Linux wheels
      run: |
        sudo docker run --rm -v `pwd`:/home urbste/pytheia_base:1.0.1 /home/pypackage/build-wheels-linux.sh
        # cleanup for custom runner
        sudo chown -R $(whoami):$(whoami) .
    - name: Archive wheels
      uses: actions/upload-artifact@v2
      with:
        name: pytheia-${{ matrix.pyversion }}-manylinux_2_17_x86_64.manylinux2014_x86_64
        path: wheelhouse/pytheia-*-${{ matrix.pyversion }}-manylinux_2_17_x86_64.manylinux2014_x86_64.whl



  # pypi-publish:
  #   name: Publish wheels to PyPI
  #   needs: [linux-build]
  #   runs-on: ubuntu-latest
  #   # We publish the wheel to pypi when a new tag is pushed,
  #   # either by creating a new GitHub release or explictly with `git tag`
  #   if: ${{ github.event_name == 'release' || startsWith(github.ref, 'refs/tags') }}
  #   steps:
  #   - name: Download wheels
  #     uses: actions/download-artifact@v2
  #     with:
  #       path: ./artifacts/
  #   - name: Move wheels
  #     run: mkdir ./wheelhouse && mv ./artifacts/**/*.whl ./wheelhouse/
  #   - name: Publish package
  #     uses: pypa/gh-action-pypi-publish@release/v1
  #     with:
  #       skip_existing: true
  #       user: __token__
  #       password: ${{ secrets.PYPI_API_TOKEN }}
  #       packages_dir: ./wheelhouse/